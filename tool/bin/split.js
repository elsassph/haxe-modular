// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
if (process.version < "v4.0.0") console.warn("Module " + (typeof(module) == "undefined" ? "" : module.filename) + " requires node.js version 4.0.0 or higher");
(function () { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Bundler = function(parser,sourceMap) {
	this.bundles = [];
	this.parser = parser;
	this.sourceMap = sourceMap;
};
Bundler.prototype = {
	generate: function(src,output,webpackMode) {
		this.webpackMode = webpackMode;
		console.log("Emit " + output);
		var result = [];
		var buffer = this.emitBundle(src,this.main,this.mainExports,true);
		result.push({ name : "Main", map : this.writeMap(output,buffer), source : this.write(output,buffer.src)});
		var _g = 0;
		var _g1 = this.bundles;
		while(_g < _g1.length) {
			var bundle = _g1[_g];
			++_g;
			var bundleOutput = js_node_Path.join(js_node_Path.dirname(output),bundle.name + ".js");
			console.log("Emit " + bundleOutput);
			buffer = this.emitBundle(src,bundle,[bundle.name],false);
			result.push({ name : bundle.name, map : this.writeMap(bundleOutput,buffer), source : this.write(bundleOutput,buffer.src)});
		}
		return result;
	}
	,writeMap: function(output,buffer) {
		if(buffer.map == null) {
			return null;
		}
		return { path : "" + output + ".map", content : this.sourceMap.emitFile(output,buffer.map).toString()};
	}
	,write: function(output,buffer) {
		if(buffer == null) {
			return null;
		}
		return { path : output, content : buffer};
	}
	,hasChanged: function(output,buffer) {
		if(!js_node_Fs.existsSync(output)) {
			return true;
		}
		var original = js_node_Fs.readFileSync(output).toString();
		return original != buffer;
	}
	,emitBundle: function(src,bundle,exports,isMain) {
		var buffer = this.webpackMode ? "/* eslint-disable */ \"use strict\"\n" : "";
		var body = this.parser.rootBody.slice();
		var head = body.shift();
		var run = isMain ? body.pop() : null;
		var inc = bundle.nodes;
		var incAll = isMain && bundle.nodes.length == 0;
		var mapNodes = [];
		var mapOffset = 0;
		var frag = isMain ? Bundler.FRAGMENTS.MAIN : Bundler.FRAGMENTS.CHILD;
		if(this.webpackMode) {
			buffer += frag.EXPORTS;
		} else {
			buffer += this.verifyExport(HxOverrides.substr(src,0,head.end + 1));
			buffer += "var require = (function(r){ return function require(m) { return r[m]; } })($hx_exports.__registry__);\n";
			++mapOffset;
			buffer += frag.SHARED;
			++mapOffset;
		}
		if(bundle.shared.length > 0) {
			var tmp;
			if(isMain) {
				tmp = bundle.shared;
			} else {
				var _g = [];
				var _g1 = 0;
				var _g2 = bundle.shared;
				while(_g1 < _g2.length) {
					var node = _g2[_g1];
					++_g1;
					_g.push("" + node + " = $" + "s." + node);
				}
				tmp = _g;
			}
			buffer += "var " + tmp.join(", ") + ";\n";
			++mapOffset;
		}
		var _g3 = 0;
		while(_g3 < body.length) {
			var node1 = body[_g3];
			++_g3;
			if(!incAll && node1.__tag__ != null && inc.indexOf(node1.__tag__) < 0) {
				if(!isMain || node1.__tag__ != "__reserved__") {
					continue;
				}
			}
			mapNodes.push(node1);
			buffer += HxOverrides.substr(src,node1.start,node1.end - node1.start);
			buffer += "\n";
		}
		buffer += this.emitHot(inc);
		if(exports.length > 0) {
			var _g4 = 0;
			while(_g4 < exports.length) {
				var node2 = exports[_g4];
				++_g4;
				buffer += "$" + "s." + node2 + " = " + node2 + "; ";
			}
			buffer += "\n";
		}
		if(run != null) {
			buffer += HxOverrides.substr(src,run.start,run.end - run.start);
			buffer += "\n";
		}
		if(!this.webpackMode) {
			buffer += "})(" + "typeof $hx_scope != \"undefined\" ? $hx_scope : $hx_scope = {}" + ", " + "typeof window != \"undefined\" ? window : typeof global != \"undefined\" ? global : typeof self != \"undefined\" ? self : this" + ");\n";
		}
		return { src : buffer, map : this.sourceMap.emitMappings(mapNodes,mapOffset)};
	}
	,emitHot: function(inc) {
		var names = [];
		var name = this.parser.isHot.keys();
		while(name.hasNext()) {
			var name1 = name.next();
			var tmp;
			var _this = this.parser.isHot;
			if(__map_reserved[name1] != null ? _this.getReserved(name1) : _this.h[name1]) {
				tmp = inc.indexOf(name1) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				names.push(name1);
			}
		}
		if(names.length == 0) {
			return "";
		}
		return "if ($" + "global.__REACT_HOT_LOADER__)\n" + ("  [" + names.join(",") + "].map(function(c) {\n") + "    __REACT_HOT_LOADER__.register(c,c.displayName,c.__fileName__);\n" + "  });\n";
	}
	,verifyExport: function(s) {
		var _this_r = new RegExp("function \\([^)]*\\)","".split("u").join(""));
		return s.replace(_this_r,"function ($hx_exports, $global)");
	}
	,process: function(mainModule,modules,debugMode) {
		if(this.parser.typesCount == 0) {
			console.log("Warning: unable to process (no type metadata)");
			this.main = { name : "Main", nodes : [], shared : []};
			this.mainExports = [];
			return;
		}
		console.log("Bundling...");
		var g = this.parser.graph;
		var _g = 0;
		while(_g < modules.length) {
			var $module = modules[_g];
			++_g;
			this.unlink(g,$module);
		}
		var mainNodes = graphlib_Alg.preorder(g,mainModule);
		if(debugMode) {
			var key = this.parser.isEnum.keys();
			while(key.hasNext()) {
				var key1 = key.next();
				mainNodes.push(key1);
			}
		}
		var _g1 = [];
		var _g11 = 0;
		while(_g11 < modules.length) {
			var module1 = modules[_g11];
			++_g11;
			_g1.push({ name : module1, nodes : graphlib_Alg.preorder(g,module1), shared : []});
		}
		this.bundles = _g1;
		var dupes = this.deduplicate(this.bundles,mainNodes,debugMode);
		mainNodes = this.addOnce(mainNodes,dupes.removed);
		this.mainExports = dupes.shared;
		this.main = { name : "Main", nodes : mainNodes, shared : modules};
	}
	,deduplicate: function(bundles,mainNodes,debugMode) {
		console.log("Extract common chunks..." + (debugMode ? " (fast)" : ""));
		var map = new haxe_ds_StringMap();
		var _g = 0;
		while(_g < mainNodes.length) {
			var node = mainNodes[_g];
			++_g;
			if(__map_reserved[node] != null) {
				map.setReserved(node,true);
			} else {
				map.h[node] = true;
			}
		}
		var dupes = [];
		var _g1 = 0;
		while(_g1 < bundles.length) {
			var bundle = bundles[_g1];
			++_g1;
			var _g11 = 0;
			var _g2 = bundle.nodes;
			while(_g11 < _g2.length) {
				var node1 = _g2[_g11];
				++_g11;
				if(__map_reserved[node1] != null ? map.existsReserved(node1) : map.h.hasOwnProperty(node1)) {
					if(dupes.indexOf(node1) < 0) {
						dupes.push(node1);
					}
				} else if(!debugMode) {
					if(__map_reserved[node1] != null) {
						map.setReserved(node1,true);
					} else {
						map.h[node1] = true;
					}
				}
			}
		}
		var shared = [];
		var g = this.parser.graph;
		var _g3 = 0;
		while(_g3 < dupes.length) {
			var node2 = dupes[_g3];
			++_g3;
			var pre = g.predecessors(node2).filter(function(preNode) {
				return dupes.indexOf(preNode) < 0;
			});
			if(pre.length > 0) {
				shared.push(node2);
			}
		}
		var _g4 = 0;
		while(_g4 < bundles.length) {
			var bundle1 = [bundles[_g4]];
			++_g4;
			var bundle2 = bundle1[0].nodes;
			var tmp = (function(bundle3) {
				return function(node3) {
					if(dupes.indexOf(node3) < 0) {
						return true;
					}
					if(shared.indexOf(node3) >= 0) {
						bundle3[0].shared.push(node3);
					}
					return false;
				};
			})(bundle1);
			bundle1[0].nodes = bundle2.filter(tmp);
		}
		console.log("Moved " + dupes.length + " common chunks (" + shared.length + " shared)");
		return { removed : dupes, shared : shared};
	}
	,addOnce: function(source,target) {
		var temp = target.slice();
		var _g = 0;
		while(_g < source.length) {
			var node = source[_g];
			++_g;
			if(target.indexOf(node) < 0) {
				temp.push(node);
			}
		}
		return temp;
	}
	,unlink: function(g,name) {
		var pred = g.predecessors(name);
		if(pred == null) {
			console.log("Cannot unlink " + name);
			return;
		}
		var _g = 0;
		while(_g < pred.length) {
			var p = pred[_g];
			++_g;
			g.removeEdge(p,name);
		}
	}
};
var HxOverrides = function() { };
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Main = function() { };
Main.main = function() {
	module.exports = { run : Main.run};
};
Main.run = function(input,output,modules,debugMode,webpackMode) {
	var src = js_node_Fs.readFileSync(input).toString();
	var parser = new Parser(src);
	var sourceMap = new SourceMap(input,src);
	var bundler = new Bundler(parser,sourceMap);
	bundler.process(parser.mainModule,modules,debugMode);
	var dir = js_node_Path.dirname(output);
	if(!js_node_Fs.existsSync(dir)) {
		js_node_Fs.mkdirSync(dir);
	}
	return bundler.generate(src,output,webpackMode);
};
var Parser = function(src) {
	this.reservedTypes = { "String" : true, "Math" : true, "Array" : true, "Int" : true, "Float" : true, "Bool" : true, "Class" : true, "Date" : true, "Dynamic" : true, "Enum" : true, __map_reserved : true};
	this.mainModule = "Main";
	var t0 = new Date().getTime();
	this.processInput(src);
	var t1 = new Date().getTime();
	console.log("Parsed in: " + (t1 - t0) + "ms");
	this.buildGraph();
	var t2 = new Date().getTime();
	console.log("Graph processed in: " + (t2 - t1) + "ms");
};
Parser.prototype = {
	processInput: function(src) {
		var program = acorn_Acorn.parse(src,{ ecmaVersion : 5, locations : true, ranges : true});
		this.walkProgram(program);
	}
	,buildGraph: function() {
		var g = new graphlib_Graph({ directed : true, compound : true});
		var cpt = 0;
		var refs = 0;
		var t = this.types.keys();
		while(t.hasNext()) {
			var t1 = t.next();
			++cpt;
			g.setNode(t1,t1);
		}
		var t2 = this.types.keys();
		while(t2.hasNext()) {
			var t3 = t2.next();
			var _this = this.types;
			refs += this.walk(g,t3,__map_reserved[t3] != null ? _this.getReserved(t3) : _this.h[t3]);
		}
		console.log("Stats: " + cpt + " types, " + refs + " references");
		this.typesCount = cpt;
		this.graph = g;
	}
	,walk: function(g,id,nodes) {
		var _gthis = this;
		var refs = 0;
		var visitors = { Identifier : function(node) {
			var name = node.name;
			var visitors1;
			if(name != id) {
				var _this = _gthis.types;
				if(__map_reserved[name] != null) {
					visitors1 = _this.existsReserved(name);
				} else {
					visitors1 = _this.h.hasOwnProperty(name);
				}
			} else {
				visitors1 = false;
			}
			if(visitors1) {
				g.setEdge(id,name);
				refs += 1;
			}
		}};
		var _g = 0;
		while(_g < nodes.length) {
			var decl = nodes[_g];
			++_g;
			acorn_Walk.simple(decl,visitors);
		}
		return refs;
	}
	,walkProgram: function(program) {
		this.types = new haxe_ds_StringMap();
		this.isHot = new haxe_ds_StringMap();
		this.isEnum = new haxe_ds_StringMap();
		this.isRequire = new haxe_ds_StringMap();
		var body = this.getBodyNodes(program);
		var _g = 0;
		while(_g < body.length) {
			var node = body[_g];
			++_g;
			var _g1 = node.type;
			if(_g1 == "ExpressionStatement") {
				this.walkRootExpression(node.expression);
			} else {
				throw new js__$Boot_HaxeError("Expecting single root statement in program");
			}
		}
	}
	,walkRootExpression: function(expr) {
		var _g = expr.type;
		if(_g == "CallExpression") {
			this.walkRootFunction(expr.callee);
		} else {
			throw new js__$Boot_HaxeError("Expecting root statement to be a function call");
		}
	}
	,walkRootFunction: function(callee) {
		var block = this.getBodyNodes(callee)[0];
		var _g = block.type;
		if(_g == "BlockStatement") {
			var body = this.getBodyNodes(block);
			this.walkDeclarations(body);
		} else {
			throw new js__$Boot_HaxeError("Expecting block of statements inside root function");
		}
	}
	,walkDeclarations: function(body) {
		this.rootBody = body;
		var _g = 0;
		while(_g < body.length) {
			var node = body[_g];
			++_g;
			var _g1 = node.type;
			switch(_g1) {
			case "ExpressionStatement":
				this.inspectExpression(node.expression,node);
				break;
			case "FunctionDeclaration":
				this.inspectFunction(node.id,node);
				break;
			case "IfStatement":
				if(node.consequent.type == "ExpressionStatement") {
					this.inspectExpression(node.consequent.expression,node);
				} else {
					this.inspectIfStatement(node.test,node);
				}
				break;
			case "VariableDeclaration":
				this.inspectDeclarations(node.declarations,node);
				break;
			default:
				console.log("unknown node");
			}
		}
	}
	,inspectIfStatement: function(test,def) {
		if(test.type == "BinaryExpression") {
			var path = this.getIdentifier(test.left);
			if(path.length > 1 && path[1] == "prototype") {
				this.tag(path[0],def);
			}
		}
	}
	,inspectFunction: function(id,def) {
		var path = this.getIdentifier(id);
		if(path.length > 0) {
			var name = path[0];
			if(name == "$extend" || name == "$bind" || name == "$iterator") {
				this.tag(name,def);
			}
		}
	}
	,inspectExpression: function(expression,def) {
		var _g = expression.type;
		switch(_g) {
		case "AssignmentExpression":
			var path = this.getIdentifier(expression.left);
			if(path.length > 0) {
				var name = path[0];
				switch(name) {
				case "$hxClasses":
					var moduleName = this.getIdentifier(expression.right);
					if(moduleName.length == 1) {
						this.tag(moduleName[0],def);
					}
					break;
				case "$hx_exports":
					break;
				default:
					if(this.types.exists(name)) {
						if(path[1] == "displayName") {
							this.trySetHot(name);
						} else if(path[1] == "__fileName__") {
							this.trySetHot(name);
						}
					}
					this.tag(name,def);
				}
			}
			break;
		case "CallExpression":
			var path1 = this.getIdentifier(expression.callee.object);
			var prop = this.getIdentifier(expression.callee.property);
			if(prop.length > 0 && path1.length > 0 && this.types.exists(path1[0])) {
				var name1 = path1[0];
				if(prop.length == 1 && prop[0] == "main") {
					this.mainModule = name1;
				}
				this.tag(name1,def);
			}
			break;
		default:
		}
	}
	,trySetHot: function(name) {
		var _this = this.isHot;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			var _this1 = this.isHot;
			if(__map_reserved[name] != null) {
				_this1.setReserved(name,true);
			} else {
				_this1.h[name] = true;
			}
		} else {
			var _this2 = this.isHot;
			if(__map_reserved[name] != null) {
				_this2.setReserved(name,false);
			} else {
				_this2.h[name] = false;
			}
		}
	}
	,inspectDeclarations: function(declarations,def) {
		var _g = 0;
		while(_g < declarations.length) {
			var decl = declarations[_g];
			++_g;
			if(decl.id != null) {
				var name = decl.id.name;
				if(decl.init != null) {
					var init = decl.init;
					var _g1 = init.type;
					switch(_g1) {
					case "AssignmentExpression":
						if(init.right.type == "FunctionExpression") {
							this.tag(name,def);
						}
						break;
					case "CallExpression":
						if(this.isRequireDecl(init.callee)) {
							this.required(name,def);
						}
						break;
					case "FunctionExpression":
						this.tag(name,def);
						break;
					case "Identifier":
						if(name.charAt(0) != "$") {
							this.tag(name,def);
						}
						break;
					case "LogicalExpression":
						if(name.indexOf("Array") >= 0) {
							this.tag(name,def);
						}
						break;
					case "MemberExpression":
						if(init.object.type == "CallExpression" && this.isRequireDecl(init.object.callee)) {
							this.required(name,def);
						}
						break;
					case "ObjectExpression":
						if(this.isEnumDecl(init)) {
							this.isEnum.set(name,true);
						}
						this.tag(name,def);
						break;
					default:
					}
				}
			}
		}
	}
	,required: function(name,def) {
		var _this = this.isRequire;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,true);
		} else {
			_this.h[name] = true;
		}
		this.tag(name,def);
	}
	,tag: function(name,def) {
		var _this = this.types;
		if(!(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name))) {
			if(this.reservedTypes[name]) {
				if(name != "__map_reserved") {
					def.__tag__ = "__reserved__";
				}
				return;
			}
			var _this1 = this.types;
			var value = [def];
			if(__map_reserved[name] != null) {
				_this1.setReserved(name,value);
			} else {
				_this1.h[name] = value;
			}
		} else {
			var _this2 = this.types;
			(__map_reserved[name] != null ? _this2.getReserved(name) : _this2.h[name]).push(def);
		}
		def.__tag__ = name;
	}
	,isReserved: function(name) {
		return this.reservedTypes[name];
	}
	,isEnumDecl: function(node) {
		var props = node.properties;
		if(node.type == "ObjectExpression" && props != null && props.length > 0) {
			return this.getIdentifier(props[0].key)[0] == "__ename__";
		} else {
			return false;
		}
	}
	,isRequireDecl: function(node) {
		if(node != null && node.type == "Identifier") {
			return node.name == "require";
		} else {
			return false;
		}
	}
	,getBodyNodes: function(node) {
		if((node.body instanceof Array) && node.body.__enum__ == null) {
			return node.body;
		} else {
			return [node.body];
		}
	}
	,getIdentifier: function(left) {
		var _g = left.type;
		switch(_g) {
		case "Identifier":
			return [left.name];
		case "Literal":
			return [left.raw];
		case "MemberExpression":
			return this.getIdentifier(left.object).concat(this.getIdentifier(left.property));
		default:
			return [];
		}
	}
};
var Reflect = function() { };
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
var SourceMap = function(input,src) {
	var p = src.lastIndexOf("//# sourceMappingURL=");
	if(p < 0) {
		return;
	}
	this.fileName = StringTools.trim(HxOverrides.substr(src,p + "//# sourceMappingURL=".length,null));
	this.fileName = js_node_Path.join(js_node_Path.dirname(input),this.fileName);
	var raw = JSON.parse(js_node_Fs.readFileSync(this.fileName).toString());
	this.source = new sourcemap_SourceMapConsumer(raw);
};
SourceMap.prototype = {
	emitMappings: function(nodes,offset) {
		if(nodes.length == 0 || this.source == null) {
			return null;
		}
		var inc = [];
		var line = 3 + offset;
		var _g = 0;
		while(_g < nodes.length) {
			var node = nodes[_g];
			++_g;
			var _g2 = node.loc.start.line;
			var _g1 = node.loc.end.line + 1;
			while(_g2 < _g1) {
				var i = _g2++;
				inc[i] = line++;
			}
		}
		var output = new sourcemap_SourceMapGenerator();
		var sourceFiles = { };
		try {
			this.source.eachMapping(function(mapping) {
				if(!isNaN(inc[mapping.generatedLine])) {
					sourceFiles[mapping.source] = true;
					var mapLine = inc[mapping.generatedLine];
					var column = mapping.originalColumn >= 0 ? mapping.originalColumn : 0;
					output.addMapping({ source : mapping.source, original : { line : mapping.originalLine, column : column}, generated : { line : mapLine, column : mapping.generatedColumn}});
				}
			});
			var _g3 = 0;
			var _g11 = Reflect.fields(sourceFiles);
			while(_g3 < _g11.length) {
				var sourceName = _g11[_g3];
				++_g3;
				var src = this.source.sourceContentFor(sourceName,true);
				if(src != null) {
					output.setSourceContent(sourceName,src);
				}
			}
			return output;
		} catch( err ) {
			console.log("Invalid source-map");
		}
		return output;
	}
	,emitFile: function(output,map) {
		if(map == null) {
			return null;
		}
		map.file = js_node_Path.basename(output);
		return map;
	}
};
var StringTools = function() { };
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
var acorn_Acorn = require("acorn");
var acorn_Walk = require("acorn/dist/walk");
var graphlib_Graph = require("graphlib").Graph;
var graphlib_Alg = require("graphlib/lib/alg");
var haxe_IMap = function() { };
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	set: function(key,value) {
		if(__map_reserved[key] != null) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) {
			return this.existsReserved(key);
		}
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
};
var haxe_io_Bytes = function() { };
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_node_Fs = require("fs");
var js_node_Path = require("path");
var js_node_buffer_Buffer = require("buffer").Buffer;
var sourcemap_SourceMapConsumer = require("source-map").SourceMapConsumer;
var sourcemap_SourceMapGenerator = require("source-map").SourceMapGenerator;
var __map_reserved = {}
Bundler.REQUIRE = "var require = (function(r){ return function require(m) { return r[m]; } })($hx_exports.__registry__);\n";
Bundler.SCOPE = "typeof $hx_scope != \"undefined\" ? $hx_scope : $hx_scope = {}";
Bundler.GLOBAL = "typeof window != \"undefined\" ? window : typeof global != \"undefined\" ? global : typeof self != \"undefined\" ? self : this";
Bundler.FUNCTION = "function ($hx_exports, $global)";
Bundler.FRAGMENTS = { MAIN : { EXPORTS : "var $hx_exports = global.$hx_exports = global.$hx_exports || {__shared__:{}}, $s = $hx_exports.__shared__;\n", SHARED : "var $s = $hx_exports.__shared__ = $hx_exports.__shared__ || {};\n"}, CHILD : { EXPORTS : "var $hx_exports = global.$hx_exports, $s = $hx_exports.__shared__;\n", SHARED : "var $s = $hx_exports.__shared__;\n"}};
SourceMap.SRC_REF = "//# sourceMappingURL=";
Main.main();
})();
